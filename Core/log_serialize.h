// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGMSG_H_
#define FLATBUFFERS_GENERATED_LOGMSG_H_

#include "flatbuffers/flatbuffers.h"

struct log_serialize;
struct log_serializeBuilder;

struct log_serialize FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef log_serializeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TAG = 6,
    VT_MSG = 8,
    VT_LEVEL = 10,
    VT_THREAD_ID = 12,
    VT_IS_MAIN_THREAD = 14,
    VT_TIMESTAMP = 16
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *tag() const {
    return GetPointer<const flatbuffers::String *>(VT_TAG);
  }
  const flatbuffers::String *msg() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG);
  }
  int8_t level() const {
    return GetField<int8_t>(VT_LEVEL, 0);
  }
  int32_t thread_id() const {
    return GetField<int32_t>(VT_THREAD_ID, 0);
  }
  uint8_t is_main_thread() const {
    return GetField<uint8_t>(VT_IS_MAIN_THREAD, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TAG) &&
           verifier.VerifyString(tag()) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           VerifyField<int8_t>(verifier, VT_LEVEL) &&
           VerifyField<int32_t>(verifier, VT_THREAD_ID) &&
           VerifyField<uint8_t>(verifier, VT_IS_MAIN_THREAD) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           verifier.EndTable();
  }
};

struct log_serializeBuilder {
  typedef log_serialize Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(log_serialize::VT_NAME, name);
  }
  void add_tag(flatbuffers::Offset<flatbuffers::String> tag) {
    fbb_.AddOffset(log_serialize::VT_TAG, tag);
  }
  void add_msg(flatbuffers::Offset<flatbuffers::String> msg) {
    fbb_.AddOffset(log_serialize::VT_MSG, msg);
  }
  void add_level(int8_t level) {
    fbb_.AddElement<int8_t>(log_serialize::VT_LEVEL, level, 0);
  }
  void add_thread_id(int32_t thread_id) {
    fbb_.AddElement<int32_t>(log_serialize::VT_THREAD_ID, thread_id, 0);
  }
  void add_is_main_thread(uint8_t is_main_thread) {
    fbb_.AddElement<uint8_t>(log_serialize::VT_IS_MAIN_THREAD, is_main_thread, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(log_serialize::VT_TIMESTAMP, timestamp, 0);
  }
  explicit log_serializeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<log_serialize> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<log_serialize>(end);
    return o;
  }
};

inline flatbuffers::Offset<log_serialize> Createlog_serialize(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> tag = 0,
    flatbuffers::Offset<flatbuffers::String> msg = 0,
    int8_t level = 0,
    int32_t thread_id = 0,
    uint8_t is_main_thread = 0,
    uint64_t timestamp = 0) {
  log_serializeBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_thread_id(thread_id);
  builder_.add_msg(msg);
  builder_.add_tag(tag);
  builder_.add_name(name);
  builder_.add_is_main_thread(is_main_thread);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<log_serialize> Createlog_serializeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *tag = nullptr,
    const char *msg = nullptr,
    int8_t level = 0,
    int32_t thread_id = 0,
    uint8_t is_main_thread = 0,
    uint64_t timestamp = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto tag__ = tag ? _fbb.CreateString(tag) : 0;
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return Createlog_serialize(
      _fbb,
      name__,
      tag__,
      msg__,
      level,
      thread_id,
      is_main_thread,
      timestamp);
}

inline const log_serialize *Getlog_serialize(const void *buf) {
  return flatbuffers::GetRoot<log_serialize>(buf);
}

inline const log_serialize *GetSizePrefixedlog_serialize(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<log_serialize>(buf);
}

inline bool Verifylog_serializeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<log_serialize>(nullptr);
}

inline bool VerifySizePrefixedlog_serializeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<log_serialize>(nullptr);
}

inline void Finishlog_serializeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<log_serialize> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedlog_serializeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<log_serialize> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_LOGMSG_H_
